.checkbox {
  @apply relative flex;

  &VerticalAlignTop {
    @apply items-start;
  }

  &VerticalAlignCenter {
    @apply items-center;
  }
}

.checkboxCheckedIcon, .checkboxIndeterminateIcon{
  @apply hidden;
}

.input {
  @apply absolute;
  opacity: 0;
  z-index: -1;
  width: 1px;
  height: 1px;

  &:focus ~ .checkboxContainer {
    box-shadow: 0 0 0px 4px theme("colors.gray.300");
  }
}

.checkboxContainer {
  @apply flex items-center justify-center flex-none rounded-xsmall;
  width: 24px;
  height: 24px;
  border-width: 2px;
  border-style: solid;

  // Margin that makes the input appear decently aligned against
  // various Thumbprint <Text> sizes
  .checkboxVerticalAlignTop & {
    margin-top: 1px;
  }
}

.text {
  @apply text-body-2 leading-body-2 font-400 pl-2;
  // This must take up the remaining available space for content that must be right-aligned.
  flex: 1 0 0%;
  // 'min-width' is needed to allow text within the checkbox to truncate.
  min-width: 0;

  &State{
    &Error{
      @apply text-red;
    }
  }
}

.input:not(:checked) {
  & ~ .checkboxContainer{
    @apply border-gray bg-white;
    color: inherit;

    &State{
      &Error{
        @apply text-red border-red bg-white;
      }

      &Indeterminate{
        @apply text-white border-blue bg-blue;

        & > .checkboxIndeterminateIcon{
          @apply block;
        }
      }
    }
  }
}

.input:checked {
  & ~ .checkboxContainer{
    @apply text-white border-blue bg-blue;

    .checkboxCheckedIcon{
      @apply block;
    }

    &State{
      &Error{
        @apply text-white border-red bg-red;
      }
    }
  }
}

.input:disabled{
  & ~ .checkboxContainer{
    color: theme('colors.black.200')!important;
    border-color: theme('colors.gray.DEFAULT')!important;
    background-color: theme('colors.gray.300')!important;
  }

  & ~ .text{
    color: theme('colors.black.200')!important;
  }
}
